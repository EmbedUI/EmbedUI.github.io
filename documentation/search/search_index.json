{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to EmbedUI About EmbedUI is an open source Project, for enthusiasts to speed-up & visualize UI development using Embedded Hardware. EmbedUI makes UI Development for Embedded Devices - simpler & faster without the need of any additional display hardware. Utilizes your Laptop/PC Display Screen to generate the required UI for your application. Open the EmbedUI Application on your PC, Connect your programmed hardware & you are ready to go ! That's all ! Info EmbedUI is still under development & advancing further Check out the latest stable release on Github","title":"Home"},{"location":"#welcome-to-embedui","text":"","title":"Welcome to EmbedUI"},{"location":"#about","text":"EmbedUI is an open source Project, for enthusiasts to speed-up & visualize UI development using Embedded Hardware. EmbedUI makes UI Development for Embedded Devices - simpler & faster without the need of any additional display hardware. Utilizes your Laptop/PC Display Screen to generate the required UI for your application. Open the EmbedUI Application on your PC, Connect your programmed hardware & you are ready to go ! That's all ! Info EmbedUI is still under development & advancing further Check out the latest stable release on Github","title":"About"},{"location":"about/","text":"Hello World","title":"About"},{"location":"about/#hello-world","text":"","title":"Hello World"},{"location":"first_run/","text":"Running your first UI Browse through the Examples Folder of the Library within Arduino IDE. Select any Example of your choice. Modify. Upload and Done ! Note The Examples are designed to support different screen sizes. So, don't forget to check & update your screen size in the Example Code. You can find the resolution for your screen by launching the EmbedUI Software Application. If you have not yet downloaded the Software Application, you can download it from Github Note Before you proceed to the next steps, make a note of the COM Port for your board & the Baudrate in the Example Code. Once you have uploaded the code in your board, open the EmbedUI Application & follow the steps: After the software loads, select the correct COM Port from the Ports List. Choose the correct Baudrate from the Baudrate List. Click Connect & the UI should start. Congratulations, you have made this far & successfully executed the very first UI Application through your Board !!!","title":"Running your first UI"},{"location":"first_run/#running-your-first-ui","text":"Browse through the Examples Folder of the Library within Arduino IDE. Select any Example of your choice. Modify. Upload and Done ! Note The Examples are designed to support different screen sizes. So, don't forget to check & update your screen size in the Example Code. You can find the resolution for your screen by launching the EmbedUI Software Application. If you have not yet downloaded the Software Application, you can download it from Github Note Before you proceed to the next steps, make a note of the COM Port for your board & the Baudrate in the Example Code. Once you have uploaded the code in your board, open the EmbedUI Application & follow the steps: After the software loads, select the correct COM Port from the Ports List. Choose the correct Baudrate from the Baudrate List. Click Connect & the UI should start. Congratulations, you have made this far & successfully executed the very first UI Application through your Board !!!","title":"Running your first UI"},{"location":"getting_started_faq/","text":"","title":"Getting started faq"},{"location":"hardware_requirements/","text":"Hardware Requirements Supports the popular ESP32, ESP8266, STM32 & Arduino Boards . Any board programmed using Arduino IDE can be used. Boards having atleast 4 kB of SRAM are preferred for error-free operation. You can even port the libraries to other Non-arduino IDE supported platforms easily, if required. Following is the list of boards & their support status for latest stable release: Board Controller Supported Notes ESP32 DevKit v1 ESP32 - NodeMCU ESP8266 - Arduino Uno Atmega328P To be Tested Arduino Nano Atmega328P-AU To be Tested Arduino Mega Atmega2560 To be Tested Arduino MKR1000 - To be Tested Arduino Zero - To be Tested","title":"Supported hardware platforms"},{"location":"hardware_requirements/#hardware-requirements","text":"Supports the popular ESP32, ESP8266, STM32 & Arduino Boards . Any board programmed using Arduino IDE can be used. Boards having atleast 4 kB of SRAM are preferred for error-free operation. You can even port the libraries to other Non-arduino IDE supported platforms easily, if required. Following is the list of boards & their support status for latest stable release: Board Controller Supported Notes ESP32 DevKit v1 ESP32 - NodeMCU ESP8266 - Arduino Uno Atmega328P To be Tested Arduino Nano Atmega328P-AU To be Tested Arduino Mega Atmega2560 To be Tested Arduino MKR1000 - To be Tested Arduino Zero - To be Tested","title":"Hardware Requirements"},{"location":"installation/","text":"Installation To get everything ready, you need to setup both Software & Hardware. Follow the following instructions to get everything configured properly. Software installation Download the latest stable release of the Software application from Github . The appication file is a portable .exe application. It can run without installation. Note The Windows Smart Screen may block the application from running. Make sure you allow the application. Hardware Setup Download the latest stable release of the Hardware library from Github . You need to install the downloaded library in Arduino IDE. Once installed, you should be able to find the library \"EmbedUI\" in the Examples Section of Arduino IDE. Tip Check out how to manually install libraries in Arduino from here .","title":"Installation"},{"location":"installation/#installation","text":"To get everything ready, you need to setup both Software & Hardware. Follow the following instructions to get everything configured properly.","title":"Installation"},{"location":"installation/#software-installation","text":"Download the latest stable release of the Software application from Github . The appication file is a portable .exe application. It can run without installation. Note The Windows Smart Screen may block the application from running. Make sure you allow the application.","title":"Software installation"},{"location":"installation/#hardware-setup","text":"Download the latest stable release of the Hardware library from Github . You need to install the downloaded library in Arduino IDE. Once installed, you should be able to find the library \"EmbedUI\" in the Examples Section of Arduino IDE. Tip Check out how to manually install libraries in Arduino from here .","title":"Hardware Setup"},{"location":"software_requirements/","text":"Software Requirements Currently the Software is only supported on Windows Info You can download the latest stable version (Windows ) on Github Linux & macOS applications are currently under development. Stay tuned.","title":"Supported software platforms"},{"location":"software_requirements/#software-requirements","text":"Currently the Software is only supported on Windows Info You can download the latest stable version (Windows ) on Github Linux & macOS applications are currently under development. Stay tuned.","title":"Software Requirements"},{"location":"textObject/","text":"Text createText Use: To create a new Text element Definition: createText( String text_data, long font_size, long x, long y, uint32_t fg_color, bool hasBackground, uint32_t bg_color , long padding_x , long padding_y, bool center_align_x, bool center_align_y, String id ) Parameters: String text_data : The String of the Text to be displayed long font_size : The font size of the Text in px long x : The position of the Text from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Text from its top-left corner along y-axis (vertical) of the screen in px uint32_t fg_color : The color of the Text to be displayed ( you can use the color() function to apply RGB values directly ) bool hasBackground : This flag should be set to true to set the background color of the Text uint32_t bg_color : The color of the Background of the Text ( you can use the color() function to apply RGB values directly ). This will be only applied if hasBackground flag is set to true long padding_x : The padding on ledt & right sides of the Text in px long padding_y : The padding on top & bottom sides of the Text in px bool center_align_x : This flag should be set to true for the Text to center-align horizontally bool center_align_y : This flag should be set to true for the Text to center-align vertically String id : ID of the object as a String updateText Use: To update/change the text of a pre-created Text element Definition: updateText( String id, String value ) Parameters: String id : The ID of the pre-created Text String value : The new value of the Text as a String updateTextColor Use: To update/change the color of a pre-created Text element Definition: updateTextColor( String id, uint32_t new_color ) Parameters: String id : The ID of the pre-created Text uint32_t new_color : The new color of the Text ( you can use the color() function to apply RGB values directly ). This will be only applied if hasBackground flag is set to true","title":"Text"},{"location":"textObject/#text","text":"","title":"Text"},{"location":"textObject/#createtext","text":"Use: To create a new Text element Definition: createText( String text_data, long font_size, long x, long y, uint32_t fg_color, bool hasBackground, uint32_t bg_color , long padding_x , long padding_y, bool center_align_x, bool center_align_y, String id ) Parameters: String text_data : The String of the Text to be displayed long font_size : The font size of the Text in px long x : The position of the Text from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Text from its top-left corner along y-axis (vertical) of the screen in px uint32_t fg_color : The color of the Text to be displayed ( you can use the color() function to apply RGB values directly ) bool hasBackground : This flag should be set to true to set the background color of the Text uint32_t bg_color : The color of the Background of the Text ( you can use the color() function to apply RGB values directly ). This will be only applied if hasBackground flag is set to true long padding_x : The padding on ledt & right sides of the Text in px long padding_y : The padding on top & bottom sides of the Text in px bool center_align_x : This flag should be set to true for the Text to center-align horizontally bool center_align_y : This flag should be set to true for the Text to center-align vertically String id : ID of the object as a String","title":"createText"},{"location":"textObject/#updatetext","text":"Use: To update/change the text of a pre-created Text element Definition: updateText( String id, String value ) Parameters: String id : The ID of the pre-created Text String value : The new value of the Text as a String","title":"updateText"},{"location":"textObject/#updatetextcolor","text":"Use: To update/change the color of a pre-created Text element Definition: updateTextColor( String id, uint32_t new_color ) Parameters: String id : The ID of the pre-created Text uint32_t new_color : The new color of the Text ( you can use the color() function to apply RGB values directly ). This will be only applied if hasBackground flag is set to true","title":"updateTextColor"}]}