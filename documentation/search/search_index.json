{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to EmbedUI Documentation About EmbedUI is an open source Project, for enthusiasts to speed-up & visualize UI development using Embedded Hardware. EmbedUI makes UI Development simpler & faster for Embedded Devices without the need of any additional display hardware. Utilizes your Laptop/PC Display Screen to generate the required UI for your application. Open the EmbedUI Application on your PC, Connect your programmed hardware & you are ready to go ! That's all ! Info EmbedUI is still under development & advancing further Check out the latest stable release on Github","title":"Home"},{"location":"#welcome-to-embedui-documentation","text":"","title":"Welcome to EmbedUI Documentation"},{"location":"#about","text":"EmbedUI is an open source Project, for enthusiasts to speed-up & visualize UI development using Embedded Hardware. EmbedUI makes UI Development simpler & faster for Embedded Devices without the need of any additional display hardware. Utilizes your Laptop/PC Display Screen to generate the required UI for your application. Open the EmbedUI Application on your PC, Connect your programmed hardware & you are ready to go ! That's all ! Info EmbedUI is still under development & advancing further Check out the latest stable release on Github","title":"About"},{"location":"about/","text":"Hello World","title":"About"},{"location":"about/#hello-world","text":"","title":"Hello World"},{"location":"buttonObject/","text":"Button createButton Note The handleEvents() function must be implemented for the Button CallBack function to work. Use: To create a Button element Definition: createButton( String button_text, long font_size, long x, long y, long w, long h, int border_radius, uint32_t text_color, uint32_t bg_color, void (*onclick_callBack)(), String id ) Parameters: String button_text : The text to be displayed on the Button as a String long font_size : The font size of the text in px long x : The position of the Text from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Text from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Button in px long h : The height of the Button in px long border_radius : The border radius of the Button in px uint32_t text_color : The color of the text on the Button ( you can use the color() function to apply RGB values directly ) uint32_t bg_color : The background color of the Button ( you can use the color() function to apply RGB values directly ) void onclick_callBack() : The CallBack function to be executed when the Button is Clicked (*Accepts only void functions) String id : ID of the Button element as a String Returns: ID of the Button element as a String updateButtonText Use: To update/change the text of a pre-created Button element Definition: updateButtonText( String id, String value ) Parameters: String id : The ID of the pre-created Button element String value : The new value of the text as a String Returns: Nothing","title":"Button"},{"location":"buttonObject/#button","text":"","title":"Button"},{"location":"buttonObject/#createbutton","text":"Note The handleEvents() function must be implemented for the Button CallBack function to work. Use: To create a Button element Definition: createButton( String button_text, long font_size, long x, long y, long w, long h, int border_radius, uint32_t text_color, uint32_t bg_color, void (*onclick_callBack)(), String id ) Parameters: String button_text : The text to be displayed on the Button as a String long font_size : The font size of the text in px long x : The position of the Text from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Text from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Button in px long h : The height of the Button in px long border_radius : The border radius of the Button in px uint32_t text_color : The color of the text on the Button ( you can use the color() function to apply RGB values directly ) uint32_t bg_color : The background color of the Button ( you can use the color() function to apply RGB values directly ) void onclick_callBack() : The CallBack function to be executed when the Button is Clicked (*Accepts only void functions) String id : ID of the Button element as a String Returns: ID of the Button element as a String","title":"createButton"},{"location":"buttonObject/#updatebuttontext","text":"Use: To update/change the text of a pre-created Button element Definition: updateButtonText( String id, String value ) Parameters: String id : The ID of the pre-created Button element String value : The new value of the text as a String Returns: Nothing","title":"updateButtonText"},{"location":"displayObject/","text":"Display EmbedUI class Note This the main class of the library. You need to create an instance of this class, before you go any further. Use: To create an instance of the Main Class of the Library Constructor: EmbedUI( HardwareSerial& serial ) Parameters: HardwareSerial& serial : The Hardware Serial Port to use for communication with the host PC. ( Currently, only Hardware Serial Ports are supported ) Returns: EmbedUI Object EmbedUI methods begin Use: To Initialize the UI Application functions Constructor: begin( uint32_t baudrate ) Parameters: uint32_t baudrate : The Baud Rate for Serial Communication Returns: Nothing clear Note This method only removes the Elements from the UI. The Added Fonts and Background properties stay same. Use: To clear all the content in the UI Constructor: begin( uint32_t baudrate ) Parameters: uint32_t baudrate : The Baud Rate for Serial Communication Returns: Nothing void setDisplayBackgroundColor(uint32_t _color); setDisplayBackgroundColor Use: To the Background Color of the Display Constructor: setDisplayBackgroundColor( uint32_t _color ) Parameters: uint32_t _color : The background color of the Display ( you can use the color() function to apply RGB values directly ) Returns: Nothing color Use: To the generate a 24-bit color value using RGB 8-bit values Constructor: color( uint8_t _r, uint8_t _g, uint8_t _b ) Parameters: uint8_t _r : The Red Color value, among the RGB Values of a Color uint8_t _g : The Green Color value, among the RGB Values of a Color uint8_t _b : The Blue Color value, among the RGB Values of a Color Returns: The Color value as an unsigned integer ( uint32_t )","title":"Display"},{"location":"displayObject/#display","text":"","title":"Display"},{"location":"displayObject/#embedui-class","text":"Note This the main class of the library. You need to create an instance of this class, before you go any further. Use: To create an instance of the Main Class of the Library Constructor: EmbedUI( HardwareSerial& serial ) Parameters: HardwareSerial& serial : The Hardware Serial Port to use for communication with the host PC. ( Currently, only Hardware Serial Ports are supported ) Returns: EmbedUI Object","title":"EmbedUI class"},{"location":"displayObject/#embedui-methods","text":"","title":"EmbedUI methods"},{"location":"displayObject/#begin","text":"Use: To Initialize the UI Application functions Constructor: begin( uint32_t baudrate ) Parameters: uint32_t baudrate : The Baud Rate for Serial Communication Returns: Nothing","title":"begin"},{"location":"displayObject/#clear","text":"Note This method only removes the Elements from the UI. The Added Fonts and Background properties stay same. Use: To clear all the content in the UI Constructor: begin( uint32_t baudrate ) Parameters: uint32_t baudrate : The Baud Rate for Serial Communication Returns: Nothing void setDisplayBackgroundColor(uint32_t _color);","title":"clear"},{"location":"displayObject/#setdisplaybackgroundcolor","text":"Use: To the Background Color of the Display Constructor: setDisplayBackgroundColor( uint32_t _color ) Parameters: uint32_t _color : The background color of the Display ( you can use the color() function to apply RGB values directly ) Returns: Nothing","title":"setDisplayBackgroundColor"},{"location":"displayObject/#color","text":"Use: To the generate a 24-bit color value using RGB 8-bit values Constructor: color( uint8_t _r, uint8_t _g, uint8_t _b ) Parameters: uint8_t _r : The Red Color value, among the RGB Values of a Color uint8_t _g : The Green Color value, among the RGB Values of a Color uint8_t _b : The Blue Color value, among the RGB Values of a Color Returns: The Color value as an unsigned integer ( uint32_t )","title":"color"},{"location":"eventsObject/","text":"Events addEvent Info Currently, supports CLICK_EVENT , HOVER_EVENT , MOUSE_IN_EVENT & MOUSE_OUT_EVENT Events. Use: To add a feedback event to an element Definition: addEvent( String id ,int event, void (*callBack_func)() ) Parameters: String id : ID of the element as a String int event : The Event to attach ( CLCIK_EVENT , HOVER_EVENT , MOUSE_IN_EVENT , MOUSE_OUT_EVENT ) void callBack_func() : The CallBack function to be executed when the event is triggered (*Accepts only void functions) Returns: Nothing handleEvents Note This function should be called in void loop() for monitor events Use: To listen for event triggers Definition: addEvent( String id ,int event, void (*callBack_func)() ) Parameters: String id : ID of the element as a String int event : The Event Name to attach ( CLCIK_EVENT , HOVER_EVENT , MOUSE_IN_EVENT , MOUSE_OUT_EVENT ) void callBack_func() : The CallBack function to be executed when the event is triggered (*Accepts only void functions) Returns: Nothing","title":"Events"},{"location":"eventsObject/#events","text":"","title":"Events"},{"location":"eventsObject/#addevent","text":"Info Currently, supports CLICK_EVENT , HOVER_EVENT , MOUSE_IN_EVENT & MOUSE_OUT_EVENT Events. Use: To add a feedback event to an element Definition: addEvent( String id ,int event, void (*callBack_func)() ) Parameters: String id : ID of the element as a String int event : The Event to attach ( CLCIK_EVENT , HOVER_EVENT , MOUSE_IN_EVENT , MOUSE_OUT_EVENT ) void callBack_func() : The CallBack function to be executed when the event is triggered (*Accepts only void functions) Returns: Nothing","title":"addEvent"},{"location":"eventsObject/#handleevents","text":"Note This function should be called in void loop() for monitor events Use: To listen for event triggers Definition: addEvent( String id ,int event, void (*callBack_func)() ) Parameters: String id : ID of the element as a String int event : The Event Name to attach ( CLCIK_EVENT , HOVER_EVENT , MOUSE_IN_EVENT , MOUSE_OUT_EVENT ) void callBack_func() : The CallBack function to be executed when the event is triggered (*Accepts only void functions) Returns: Nothing","title":"handleEvents"},{"location":"first_run/","text":"Running your first UI Browse through the Examples Folder of the Library within Arduino IDE. Select any Example of your choice. Modify. Upload and Done ! Note Don't forget to check & update your screen size in the Example Code. You can find the resolution for your screen by launching the EmbedUI Software Application. If you have not yet downloaded the Software Application, you can download it from Github Note Before you proceed to the next steps, make a note of the COM Port for your board & the Baudrate in the Example Code. Once you have uploaded the code in your board, open the EmbedUI Application & follow the steps: After the software loads, select the correct COM Port from the Ports List. Choose the correct Baudrate from the Baudrate List. Click Connect & the UI should start. Congratulations, you have made this far & successfully executed the very first UI Application through your Board !!!","title":"Running your first UI"},{"location":"first_run/#running-your-first-ui","text":"Browse through the Examples Folder of the Library within Arduino IDE. Select any Example of your choice. Modify. Upload and Done ! Note Don't forget to check & update your screen size in the Example Code. You can find the resolution for your screen by launching the EmbedUI Software Application. If you have not yet downloaded the Software Application, you can download it from Github Note Before you proceed to the next steps, make a note of the COM Port for your board & the Baudrate in the Example Code. Once you have uploaded the code in your board, open the EmbedUI Application & follow the steps: After the software loads, select the correct COM Port from the Ports List. Choose the correct Baudrate from the Baudrate List. Click Connect & the UI should start. Congratulations, you have made this far & successfully executed the very first UI Application through your Board !!!","title":"Running your first UI"},{"location":"fontObject/","text":"Font Font class Info To add a new Font, you need to create an instance of this class with valid parameters Currently, only Google Fonts are supported Use: To create a new Font object Constructor: Font( String font_link, String font_name, String font_fallback ) Parameters: String font_link : The external weblink for the primary Font String font_name : The name of the primary Font String font_fallback : The fallback/secondary Font name to use, if the specified primary Font is not found Returns: Font Object Font methods addFont Note You need to create a Font object before adding it to the UI Use: To add a Font to the UI Definition: addFont( Font font ) Parameters: Font font : The Font Object of the target Font. Returns: Nothing setGlobalFont Note You need to add Font to the UI before setting the Font Use: To set the Global Font of the UI Definition: setGlobalFont( Font font ) Parameters: Font font : The Font Object of the target Font Returns: Nothing","title":"Font"},{"location":"fontObject/#font","text":"","title":"Font"},{"location":"fontObject/#font-class","text":"Info To add a new Font, you need to create an instance of this class with valid parameters Currently, only Google Fonts are supported Use: To create a new Font object Constructor: Font( String font_link, String font_name, String font_fallback ) Parameters: String font_link : The external weblink for the primary Font String font_name : The name of the primary Font String font_fallback : The fallback/secondary Font name to use, if the specified primary Font is not found Returns: Font Object","title":"Font class"},{"location":"fontObject/#font-methods","text":"","title":"Font methods"},{"location":"fontObject/#addfont","text":"Note You need to create a Font object before adding it to the UI Use: To add a Font to the UI Definition: addFont( Font font ) Parameters: Font font : The Font Object of the target Font. Returns: Nothing","title":"addFont"},{"location":"fontObject/#setglobalfont","text":"Note You need to add Font to the UI before setting the Font Use: To set the Global Font of the UI Definition: setGlobalFont( Font font ) Parameters: Font font : The Font Object of the target Font Returns: Nothing","title":"setGlobalFont"},{"location":"getting_started_faq/","text":"","title":"Getting started faq"},{"location":"hardware_requirements/","text":"Hardware Requirements Supports the popular ESP32, ESP8266, STM32 & Arduino Boards . Any board programmed using Arduino IDE can be used. Boards having atleast 4 kB of SRAM are preferred for error-free operation. Following is the list of boards & their support status for latest stable release: Board Controller Supported Notes ESP32 DevKit v1 ESP32 - NodeMCU ESP8266 - Arduino Uno Atmega328P To be Tested Arduino Nano Atmega328P-AU To be Tested Arduino Mega Atmega2560 - Arduino MKR1000 - To be Tested Arduino Zero - To be Tested","title":"Supported hardware platforms"},{"location":"hardware_requirements/#hardware-requirements","text":"Supports the popular ESP32, ESP8266, STM32 & Arduino Boards . Any board programmed using Arduino IDE can be used. Boards having atleast 4 kB of SRAM are preferred for error-free operation. Following is the list of boards & their support status for latest stable release: Board Controller Supported Notes ESP32 DevKit v1 ESP32 - NodeMCU ESP8266 - Arduino Uno Atmega328P To be Tested Arduino Nano Atmega328P-AU To be Tested Arduino Mega Atmega2560 - Arduino MKR1000 - To be Tested Arduino Zero - To be Tested","title":"Hardware Requirements"},{"location":"imagesObject/","text":"Image createImageFromLink Use: To create an Image element from an external weblink Definition: createImageFromLink( String link, long x, long y, long w, long h, String id ) Parameters: String link : The external link of the Image to load from long x : The position of the Image from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Image from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Image in px long h : The height of the Image in px String id : The ID of the Image element Returns: ID of the Image element as a String createImageFromFile Use: To create an Image element using an internal/local image file Definition: createImageFromFile( String file_name, long x, long y, long w, long h, String id ) Parameters: String file_name : The inetrnal/local file name of the Image with extension eg: myImage.jpg long x : The position of the Image from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Image from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Image in px long h : The height of the Image in px String id : The ID of the Image element Returns: ID of the Image element as a String Note Before using this feature, make sure the images are copied in the images folder of EmbedUI Info You can click the Assets icon in the menu bar of the application to open the Assets folder. You can find the EmbedUI folder in My Documents > EmbedUi","title":"Image"},{"location":"imagesObject/#image","text":"","title":"Image"},{"location":"imagesObject/#createimagefromlink","text":"Use: To create an Image element from an external weblink Definition: createImageFromLink( String link, long x, long y, long w, long h, String id ) Parameters: String link : The external link of the Image to load from long x : The position of the Image from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Image from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Image in px long h : The height of the Image in px String id : The ID of the Image element Returns: ID of the Image element as a String","title":"createImageFromLink"},{"location":"imagesObject/#createimagefromfile","text":"Use: To create an Image element using an internal/local image file Definition: createImageFromFile( String file_name, long x, long y, long w, long h, String id ) Parameters: String file_name : The inetrnal/local file name of the Image with extension eg: myImage.jpg long x : The position of the Image from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Image from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Image in px long h : The height of the Image in px String id : The ID of the Image element Returns: ID of the Image element as a String Note Before using this feature, make sure the images are copied in the images folder of EmbedUI Info You can click the Assets icon in the menu bar of the application to open the Assets folder. You can find the EmbedUI folder in My Documents > EmbedUi","title":"createImageFromFile"},{"location":"installation/","text":"Installation To get everything ready, you need to setup both Software & Hardware. Follow the following instructions to get everything configured properly. Software installation Download the latest stable release of the Software application from Github . Windows App The appication file is a .exe installer application. You need to install it in order to use the application. Once you complete the installation, you can find it in the Start Menu or on you Desktop. Note The Windows Smart Screen may block the application from running. Make sure you allow the application. macOS App The appication file is a .dmg installer application. You need to install it in order to use the application. Once you complete the installation, you can find it in installed Applications. Hardware Setup Download the latest branch of the Hardware library from Github . You need to install the downloaded library in Arduino IDE. Once installed, you should be able to find the library \"EmbedUI\" in the Examples Section of Arduino IDE. Tip Check out how to manually install libraries in Arduino from here .","title":"Installation"},{"location":"installation/#installation","text":"To get everything ready, you need to setup both Software & Hardware. Follow the following instructions to get everything configured properly.","title":"Installation"},{"location":"installation/#software-installation","text":"Download the latest stable release of the Software application from Github .","title":"Software installation"},{"location":"installation/#windows-app","text":"The appication file is a .exe installer application. You need to install it in order to use the application. Once you complete the installation, you can find it in the Start Menu or on you Desktop. Note The Windows Smart Screen may block the application from running. Make sure you allow the application.","title":"Windows App"},{"location":"installation/#macos-app","text":"The appication file is a .dmg installer application. You need to install it in order to use the application. Once you complete the installation, you can find it in installed Applications.","title":"macOS App"},{"location":"installation/#hardware-setup","text":"Download the latest branch of the Hardware library from Github . You need to install the downloaded library in Arduino IDE. Once installed, you should be able to find the library \"EmbedUI\" in the Examples Section of Arduino IDE. Tip Check out how to manually install libraries in Arduino from here .","title":"Hardware Setup"},{"location":"modifiersObject/","text":"Modifiers setForegroundColor Use: To set the Foreground color of an element Definition: setForegroundColor( String id, uint32_t new_color ) Parameters: String id : ID of the element as a String uint32_t new_color : The new color value to set ( you can use the color() function to apply RGB values directly ) Returns: Nothing setBackgroundColor Use: To set the Background color of an element Definition: setBackgroundColor( String id, uint32_t new_color ) Parameters: String id : ID of the element as a String uint32_t new_color : The new color value to set ( you can use the color() function to apply RGB values directly ) Returns: Nothing updatePosition Use: To set the Background color of an element Definition: updatePosition( String id, long x, long y ) Parameters: String id : ID of the element as a String long x : The new position of the element from its top-left corner along x-axis (horizontal) of the screen in px long y : The new position of the element from its top-left corner along y-axis (vertical) of the screen in px Returns: Nothing void setSize(String id, long w, long h); setSize Use: To set the Size of an element Definition: setSize( String id, long w, long h ) Parameters: String id : ID of the element as a String long w : The new width of the element in px long h : The new height of the element in px Returns: Nothing setVisibility Use: To set the Visibility of an element Definition: setVisibility( String id, bool visible ) Parameters: String id : ID of the element as a String bool visible : Set this flag to true to show the element. Set this flag to false to hide the element. Returns: Nothing setOpacity Use: To set the Opacity of an element Definition: setOpacity( String id, int opacity ) Parameters: String id : ID of the element as a String int opacity : The value of opacity in percentage (0-100) Returns: Nothing setRotation Use: To set the rotation of a pre-created element in the UI Definition: setRotation( String id, float degrees ) Parameters: String id : ID of the element as a String float degrees : Rotation angle in Degrees Returns: Nothing void setTransition(String id, int transition_type, unsigned long transition_duration, unsigned long transition_delay); setTransition Use: To set the rotation of a pre-created element in the UI Definition: setTransition( String id, int transition_type, unsigned long transition_duration, unsigned long transition_delay ) Parameters: String id : ID of the element as a String int transition_type : The transition type to apply - LINEAR , SOFT , SOFT_START , SOFT_END , SOFT_START_END unsigned long transition_duration : The duration for which the transition runs in milliseconds unsigned long transition_delay : The delay duration after which the transition runs in milliseconds Returns: Nothing void openExternalLink(String external_link); openExternalLink Use: To open an external link in the system browser from the UI application Definition: openExternalLink( String external_link ) Parameters: String external_link : External Web link as a String Returns: Nothing removeObject Use: To Remove an element from the UI Definition: removeObject( String id ) Parameters: String id : ID of the element as a String Returns: Nothing","title":"Modifiers"},{"location":"modifiersObject/#modifiers","text":"","title":"Modifiers"},{"location":"modifiersObject/#setforegroundcolor","text":"Use: To set the Foreground color of an element Definition: setForegroundColor( String id, uint32_t new_color ) Parameters: String id : ID of the element as a String uint32_t new_color : The new color value to set ( you can use the color() function to apply RGB values directly ) Returns: Nothing","title":"setForegroundColor"},{"location":"modifiersObject/#setbackgroundcolor","text":"Use: To set the Background color of an element Definition: setBackgroundColor( String id, uint32_t new_color ) Parameters: String id : ID of the element as a String uint32_t new_color : The new color value to set ( you can use the color() function to apply RGB values directly ) Returns: Nothing","title":"setBackgroundColor"},{"location":"modifiersObject/#updateposition","text":"Use: To set the Background color of an element Definition: updatePosition( String id, long x, long y ) Parameters: String id : ID of the element as a String long x : The new position of the element from its top-left corner along x-axis (horizontal) of the screen in px long y : The new position of the element from its top-left corner along y-axis (vertical) of the screen in px Returns: Nothing void setSize(String id, long w, long h);","title":"updatePosition"},{"location":"modifiersObject/#setsize","text":"Use: To set the Size of an element Definition: setSize( String id, long w, long h ) Parameters: String id : ID of the element as a String long w : The new width of the element in px long h : The new height of the element in px Returns: Nothing","title":"setSize"},{"location":"modifiersObject/#setvisibility","text":"Use: To set the Visibility of an element Definition: setVisibility( String id, bool visible ) Parameters: String id : ID of the element as a String bool visible : Set this flag to true to show the element. Set this flag to false to hide the element. Returns: Nothing","title":"setVisibility"},{"location":"modifiersObject/#setopacity","text":"Use: To set the Opacity of an element Definition: setOpacity( String id, int opacity ) Parameters: String id : ID of the element as a String int opacity : The value of opacity in percentage (0-100) Returns: Nothing","title":"setOpacity"},{"location":"modifiersObject/#setrotation","text":"Use: To set the rotation of a pre-created element in the UI Definition: setRotation( String id, float degrees ) Parameters: String id : ID of the element as a String float degrees : Rotation angle in Degrees Returns: Nothing void setTransition(String id, int transition_type, unsigned long transition_duration, unsigned long transition_delay);","title":"setRotation"},{"location":"modifiersObject/#settransition","text":"Use: To set the rotation of a pre-created element in the UI Definition: setTransition( String id, int transition_type, unsigned long transition_duration, unsigned long transition_delay ) Parameters: String id : ID of the element as a String int transition_type : The transition type to apply - LINEAR , SOFT , SOFT_START , SOFT_END , SOFT_START_END unsigned long transition_duration : The duration for which the transition runs in milliseconds unsigned long transition_delay : The delay duration after which the transition runs in milliseconds Returns: Nothing void openExternalLink(String external_link);","title":"setTransition"},{"location":"modifiersObject/#openexternallink","text":"Use: To open an external link in the system browser from the UI application Definition: openExternalLink( String external_link ) Parameters: String external_link : External Web link as a String Returns: Nothing","title":"openExternalLink"},{"location":"modifiersObject/#removeobject","text":"Use: To Remove an element from the UI Definition: removeObject( String id ) Parameters: String id : ID of the element as a String Returns: Nothing","title":"removeObject"},{"location":"shapesObject/","text":"Shapes createLine Use: To create a Line element Definition: createLine( long x1, long y1, long x2, long y2, long line_thickness, uint32_t fill_color , String id ) Parameters: long x1 : The x1 co-ordinate of the Line in px long y1 : The y1 co-ordinate of the Line in px long x2 : The x2 co-ordinate of the Line in px long y2 : The y2 co-ordinate of the Line in px long line_thickness : The thickness of the Line in px uint32_t fill_color : The color of the Line to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Line element as a String Returns: ID of the Line element as a String createRect Use: To create a Outilned Rectangle element Definition: createRect( long x, long y, long w, long h, long border_thickness, uint32_t b_color, String id ) Parameters: long x : The position of the Rectangle from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Rectangle from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Rectangle in px long h : The height of the Rectangle in px long border_thickness : The border thickness of the Rectangle in px uint32_t b_color : The border color of the Rectangle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Outlined Rectangle element as a String Returns: ID of the Outlined Rectangle element as a String createRoundRect Use: To create a Outilned Round-Cornered Rectangle element Definition: createRoundRect( long x, long y, long w, long h, long border_thickness, long border_radius, uint32_t b_color , String id ) Parameters: long x : The position of the Rectangle from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Rectangle from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Rectangle in px long h : The height of the Rectangle in px long border_thickness : The border thickness of the Rectangle in px long border_radius : The border radius of the Rectangle in px uint32_t b_color : The border color of the Rectangle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Outlined Round-Cornered Rectangle element as a String Returns: ID of the Outlined Round-Cornered Rectangle element as a String createFilledRect Use: To create a Filled Rectangle element Definition: createFilledRect( long x, long y, long w, long h, uint32_t fill_color, String id ) Parameters: long x : The position of the Rectangle from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Rectangle from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Rectangle in px long h : The height of the Rectangle in px uint32_t fill_color : The fill color of the Rectangle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Filled Rectangle element as a String Returns: ID of the Filled Rectangle element as a String createFilledRoundRect Use: To create a Filled Round-Conered Rectangle element Definition: createFilledRoundRect( long x, long y, long w, long h, long border_radius, uint32_t fill_color , String id ) Parameters: long x : The position of the Rectangle from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Rectangle from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Rectangle in px long h : The height of the Rectangle in px long border_radius : The border radius of the Rectangle in px uint32_t fill_color : The fill color of the Rectangle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Outlined Round-Cornered Rectangle element as a String Returns: ID of the Outlined Round-Cornered Rectangle element as a String String createCircle(long x, long y, long radius, long border_thickness, uint32_t b_color , String id); createCircle Use: To create a Outlined Circle element Definition: createCircle( long x, long y, long radius, long border_thickness, uint32_t b_color , String id ) Parameters: long x : The position of the Circle from its center along x-axis (horizontal) of the screen in px long y : The position of the Circle from its center along y-axis (vertical) of the screen in px long radius : The radius of the Circle in px long border_thickness : The border radius of the Circle in px uint32_t b_color : The border color of the Circle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Outlined Circle element as a String Returns: ID of the Outlined Circle element as a String createFilledCircle Use: To create a Filled Circle element Definition: createFilledCircle( long x, long y, long radius, uint32_t fill_color, String id ) Parameters: long x : The position of the Circle from its center along x-axis (horizontal) of the screen in px long y : The position of the Circle from its center along y-axis (vertical) of the screen in px long radius : The radius of the Circle in px uint32_t fill_color : The fill color of the Circle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Filled Circle element as a String Returns: ID of the Filled Circle element as a String createTriangle Use: To create a Outlined Triangle element Definition: createTriangle( long x1, long y1, long x2, long y2, long x3, long y3, long border_thickness, uint32_t b_color, String id ) Parameters: long x1 : The x1 co-ordinate of the Triangle in px long y1 : The y1 co-ordinate of the Triangle in px long x2 : The x2 co-ordinate of the Triangle in px long y2 : The y2 co-ordinate of the Triangle in px long x3 : The x3 co-ordinate of the Triangle in px long y3 : The y3 co-ordinate of the Triangle in px long border_thickness : The border radius of the Triangle in px uint32_t b_color : The border color of the Triangle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Outlined Triangle element as a String Returns: ID of the Outlined Triangle element as a String createFilledTriangle Use: To create a Filled Triangle element Definition: createFilledTriangle( long x1, long y1, long x2, long y2, long x3, long y3, uint32_t fill_color, String id ) Parameters: long x1 : The x1 co-ordinate of the Triangle in px long y1 : The y1 co-ordinate of the Triangle in px long x2 : The x2 co-ordinate of the Triangle in px long y2 : The y2 co-ordinate of the Triangle in px long x3 : The x3 co-ordinate of the Triangle in px long y3 : The y3 co-ordinate of the Triangle in px uint32_t fill_color : The fill color of the Triangle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Filled Triangle element as a String Returns: ID of the Filled Triangle element as a String","title":"Shapes"},{"location":"shapesObject/#shapes","text":"","title":"Shapes"},{"location":"shapesObject/#createline","text":"Use: To create a Line element Definition: createLine( long x1, long y1, long x2, long y2, long line_thickness, uint32_t fill_color , String id ) Parameters: long x1 : The x1 co-ordinate of the Line in px long y1 : The y1 co-ordinate of the Line in px long x2 : The x2 co-ordinate of the Line in px long y2 : The y2 co-ordinate of the Line in px long line_thickness : The thickness of the Line in px uint32_t fill_color : The color of the Line to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Line element as a String Returns: ID of the Line element as a String","title":"createLine"},{"location":"shapesObject/#createrect","text":"Use: To create a Outilned Rectangle element Definition: createRect( long x, long y, long w, long h, long border_thickness, uint32_t b_color, String id ) Parameters: long x : The position of the Rectangle from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Rectangle from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Rectangle in px long h : The height of the Rectangle in px long border_thickness : The border thickness of the Rectangle in px uint32_t b_color : The border color of the Rectangle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Outlined Rectangle element as a String Returns: ID of the Outlined Rectangle element as a String","title":"createRect"},{"location":"shapesObject/#createroundrect","text":"Use: To create a Outilned Round-Cornered Rectangle element Definition: createRoundRect( long x, long y, long w, long h, long border_thickness, long border_radius, uint32_t b_color , String id ) Parameters: long x : The position of the Rectangle from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Rectangle from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Rectangle in px long h : The height of the Rectangle in px long border_thickness : The border thickness of the Rectangle in px long border_radius : The border radius of the Rectangle in px uint32_t b_color : The border color of the Rectangle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Outlined Round-Cornered Rectangle element as a String Returns: ID of the Outlined Round-Cornered Rectangle element as a String","title":"createRoundRect"},{"location":"shapesObject/#createfilledrect","text":"Use: To create a Filled Rectangle element Definition: createFilledRect( long x, long y, long w, long h, uint32_t fill_color, String id ) Parameters: long x : The position of the Rectangle from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Rectangle from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Rectangle in px long h : The height of the Rectangle in px uint32_t fill_color : The fill color of the Rectangle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Filled Rectangle element as a String Returns: ID of the Filled Rectangle element as a String","title":"createFilledRect"},{"location":"shapesObject/#createfilledroundrect","text":"Use: To create a Filled Round-Conered Rectangle element Definition: createFilledRoundRect( long x, long y, long w, long h, long border_radius, uint32_t fill_color , String id ) Parameters: long x : The position of the Rectangle from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Rectangle from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Rectangle in px long h : The height of the Rectangle in px long border_radius : The border radius of the Rectangle in px uint32_t fill_color : The fill color of the Rectangle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Outlined Round-Cornered Rectangle element as a String Returns: ID of the Outlined Round-Cornered Rectangle element as a String String createCircle(long x, long y, long radius, long border_thickness, uint32_t b_color , String id);","title":"createFilledRoundRect"},{"location":"shapesObject/#createcircle","text":"Use: To create a Outlined Circle element Definition: createCircle( long x, long y, long radius, long border_thickness, uint32_t b_color , String id ) Parameters: long x : The position of the Circle from its center along x-axis (horizontal) of the screen in px long y : The position of the Circle from its center along y-axis (vertical) of the screen in px long radius : The radius of the Circle in px long border_thickness : The border radius of the Circle in px uint32_t b_color : The border color of the Circle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Outlined Circle element as a String Returns: ID of the Outlined Circle element as a String","title":"createCircle"},{"location":"shapesObject/#createfilledcircle","text":"Use: To create a Filled Circle element Definition: createFilledCircle( long x, long y, long radius, uint32_t fill_color, String id ) Parameters: long x : The position of the Circle from its center along x-axis (horizontal) of the screen in px long y : The position of the Circle from its center along y-axis (vertical) of the screen in px long radius : The radius of the Circle in px uint32_t fill_color : The fill color of the Circle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Filled Circle element as a String Returns: ID of the Filled Circle element as a String","title":"createFilledCircle"},{"location":"shapesObject/#createtriangle","text":"Use: To create a Outlined Triangle element Definition: createTriangle( long x1, long y1, long x2, long y2, long x3, long y3, long border_thickness, uint32_t b_color, String id ) Parameters: long x1 : The x1 co-ordinate of the Triangle in px long y1 : The y1 co-ordinate of the Triangle in px long x2 : The x2 co-ordinate of the Triangle in px long y2 : The y2 co-ordinate of the Triangle in px long x3 : The x3 co-ordinate of the Triangle in px long y3 : The y3 co-ordinate of the Triangle in px long border_thickness : The border radius of the Triangle in px uint32_t b_color : The border color of the Triangle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Outlined Triangle element as a String Returns: ID of the Outlined Triangle element as a String","title":"createTriangle"},{"location":"shapesObject/#createfilledtriangle","text":"Use: To create a Filled Triangle element Definition: createFilledTriangle( long x1, long y1, long x2, long y2, long x3, long y3, uint32_t fill_color, String id ) Parameters: long x1 : The x1 co-ordinate of the Triangle in px long y1 : The y1 co-ordinate of the Triangle in px long x2 : The x2 co-ordinate of the Triangle in px long y2 : The y2 co-ordinate of the Triangle in px long x3 : The x3 co-ordinate of the Triangle in px long y3 : The y3 co-ordinate of the Triangle in px uint32_t fill_color : The fill color of the Triangle to be displayed ( you can use the color() function to apply RGB values directly ) String id : ID of the Filled Triangle element as a String Returns: ID of the Filled Triangle element as a String","title":"createFilledTriangle"},{"location":"software_requirements/","text":"Software Requirements Currently the Software is only supported on Windows Info You can download the latest stable version (Windows ) on Github You can download the latest stable version (macOS ) on Github Linux application is currently under development. Stay tuned.","title":"Supported software platforms"},{"location":"software_requirements/#software-requirements","text":"Currently the Software is only supported on Windows Info You can download the latest stable version (Windows ) on Github You can download the latest stable version (macOS ) on Github Linux application is currently under development. Stay tuned.","title":"Software Requirements"},{"location":"textObject/","text":"Text createText Use: To create a Text element Definition: createText( String text_data, long font_size, long x, long y, uint32_t fg_color, bool hasBackground, uint32_t bg_color , long padding_x , long padding_y, bool center_align_x, bool center_align_y, String id ) Parameters: String text_data : The String of the Text to be displayed long font_size : The font size of the Text in px long x : The position of the Text from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Text from its top-left corner along y-axis (vertical) of the screen in px uint32_t fg_color : The color of the Text to be displayed ( you can use the color() function to apply RGB values directly ) bool hasBackground : This flag should be set to true to set the background color of the Text uint32_t bg_color : The color of the Background of the Text ( you can use the color() function to apply RGB values directly ). This will be only applied if hasBackground flag is set to true long padding_x : The padding on left & right sides of the Text in px long padding_y : The padding on top & bottom sides of the Text in px bool center_align_x : This flag should be set to true for the Text to center-align horizontally bool center_align_y : This flag should be set to true for the Text to center-align vertically String id : ID of the Text element as a String Returns: ID of the Text element as a String createTextBox Use: To create a Text Box (Multi-Line text) element Definition: createTextBox( String text_data, long font_size, long x, long y, long w, long h, uint32_t text_color, bool hasBackground, uint32_t bg_color , long padding_x , long padding_y, bool center_align_x, bool center_align_y, String id ) Parameters: String text_data : The String of the Text to be displayed long font_size : The font size of the Text in px long x : The position of the Text from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Text from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Text Box in px long h : The height of the Text Box in px uint32_t text_color : The color of the Text to be displayed ( you can use the color() function to apply RGB values directly ) bool hasBackground : This flag should be set to true to set the background color of the Text uint32_t bg_color : The color of the Background of the Text ( you can use the color() function to apply RGB values directly ). This will be only applied if hasBackground flag is set to true long padding_x : The padding on left & right sides of the Text in px long padding_y : The padding on top & bottom sides of the Text in px bool center_align_x : This flag should be set to true for the Text to center-align horizontally bool center_align_y : This flag should be set to true for the Text to center-align vertically String id : ID of the Text element as a String Returns: ID of the Text Box element as a String updateText Use: To update/change the text of a pre-created Text element Definition: updateText( String id, String value ) Parameters: String id : The ID of the pre-created Text element String value : The new value of the Text as a String Returns: Nothing updateTextColor Use: To update/change the color of a pre-created Text element Definition: updateTextColor( String id, uint32_t new_color ) Parameters: String id : The ID of the pre-created Text element uint32_t new_color : The new color of the Text ( you can use the color() function to apply RGB values directly ) Returns: Nothing updateTextFont Use: To update/change the font of a pre-created Text element Definition: updateTextFont( String id, Font font ) Parameters: String id : The ID of the pre-created Text element Font font : The new font for the Text. You need to pass a pre-created font object to it Returns: Nothing addUnderline Use: To add underline to a pre-created Text element Definition: addUnderline( String id, uint32_t color ) Parameters: String id : The ID of the pre-created Text element uint32_t color : The color for the underline ( you can use the color() function to apply RGB values directly ) Returns: Nothing addStrikeThrough Use: To add strike-through to a pre-created Text element Definition: addStrikeThrough( String id, uint32_t color ) Parameters: String id : The ID of the pre-created Text element uint32_t color : The color for the strike-through ( you can use the color() function to apply RGB values directly ) Returns: Nothing setFontWeight Use: To add strike-through to a pre-created Text element Definition: setFontWeight( String id, int font_weight ) Parameters: String id : The ID of the pre-created Text element int font_weight : The font-weight for the Text. Supported values are: 100,200,300,400,500,600,700,800,900 Returns: Nothing Note This feature depends on the font family & is only applicable if the font supports it. setTextNormal Use: To set the font-style of a pre-created Text element to Normal (Removes Bold & Italics Styles) Definition: setTextNormal( String id ) Parameters: String id : The ID of the pre-created Text element Returns: Nothing setTextBold Use: To set the font-style of a pre-created Text element to Bold Definition: setTextBold( String id ) Parameters: String id : The ID of the pre-created Text element Returns: Nothing setTextItalic Use: To set the font-style of a pre-created Text element to Italic Definition: setTextItalic( String id ) Parameters: String id : The ID of the pre-created Text element Returns: Nothing setTextAlignment Use: To set the alignment of a pre-created Text element Definition: setTextAlignment( String id, int alignment ) Parameters: String id : The ID of the pre-created Text element int alignment : The alignment of the Text. Supported values are: CENTER_ALIGN, LEFT_ALIGN, RIGHT_ALIGN, JUSTIFY_TEXT Returns: Nothing","title":"Text"},{"location":"textObject/#text","text":"","title":"Text"},{"location":"textObject/#createtext","text":"Use: To create a Text element Definition: createText( String text_data, long font_size, long x, long y, uint32_t fg_color, bool hasBackground, uint32_t bg_color , long padding_x , long padding_y, bool center_align_x, bool center_align_y, String id ) Parameters: String text_data : The String of the Text to be displayed long font_size : The font size of the Text in px long x : The position of the Text from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Text from its top-left corner along y-axis (vertical) of the screen in px uint32_t fg_color : The color of the Text to be displayed ( you can use the color() function to apply RGB values directly ) bool hasBackground : This flag should be set to true to set the background color of the Text uint32_t bg_color : The color of the Background of the Text ( you can use the color() function to apply RGB values directly ). This will be only applied if hasBackground flag is set to true long padding_x : The padding on left & right sides of the Text in px long padding_y : The padding on top & bottom sides of the Text in px bool center_align_x : This flag should be set to true for the Text to center-align horizontally bool center_align_y : This flag should be set to true for the Text to center-align vertically String id : ID of the Text element as a String Returns: ID of the Text element as a String","title":"createText"},{"location":"textObject/#createtextbox","text":"Use: To create a Text Box (Multi-Line text) element Definition: createTextBox( String text_data, long font_size, long x, long y, long w, long h, uint32_t text_color, bool hasBackground, uint32_t bg_color , long padding_x , long padding_y, bool center_align_x, bool center_align_y, String id ) Parameters: String text_data : The String of the Text to be displayed long font_size : The font size of the Text in px long x : The position of the Text from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Text from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Text Box in px long h : The height of the Text Box in px uint32_t text_color : The color of the Text to be displayed ( you can use the color() function to apply RGB values directly ) bool hasBackground : This flag should be set to true to set the background color of the Text uint32_t bg_color : The color of the Background of the Text ( you can use the color() function to apply RGB values directly ). This will be only applied if hasBackground flag is set to true long padding_x : The padding on left & right sides of the Text in px long padding_y : The padding on top & bottom sides of the Text in px bool center_align_x : This flag should be set to true for the Text to center-align horizontally bool center_align_y : This flag should be set to true for the Text to center-align vertically String id : ID of the Text element as a String Returns: ID of the Text Box element as a String","title":"createTextBox"},{"location":"textObject/#updatetext","text":"Use: To update/change the text of a pre-created Text element Definition: updateText( String id, String value ) Parameters: String id : The ID of the pre-created Text element String value : The new value of the Text as a String Returns: Nothing","title":"updateText"},{"location":"textObject/#updatetextcolor","text":"Use: To update/change the color of a pre-created Text element Definition: updateTextColor( String id, uint32_t new_color ) Parameters: String id : The ID of the pre-created Text element uint32_t new_color : The new color of the Text ( you can use the color() function to apply RGB values directly ) Returns: Nothing","title":"updateTextColor"},{"location":"textObject/#updatetextfont","text":"Use: To update/change the font of a pre-created Text element Definition: updateTextFont( String id, Font font ) Parameters: String id : The ID of the pre-created Text element Font font : The new font for the Text. You need to pass a pre-created font object to it Returns: Nothing","title":"updateTextFont"},{"location":"textObject/#addunderline","text":"Use: To add underline to a pre-created Text element Definition: addUnderline( String id, uint32_t color ) Parameters: String id : The ID of the pre-created Text element uint32_t color : The color for the underline ( you can use the color() function to apply RGB values directly ) Returns: Nothing","title":"addUnderline"},{"location":"textObject/#addstrikethrough","text":"Use: To add strike-through to a pre-created Text element Definition: addStrikeThrough( String id, uint32_t color ) Parameters: String id : The ID of the pre-created Text element uint32_t color : The color for the strike-through ( you can use the color() function to apply RGB values directly ) Returns: Nothing","title":"addStrikeThrough"},{"location":"textObject/#setfontweight","text":"Use: To add strike-through to a pre-created Text element Definition: setFontWeight( String id, int font_weight ) Parameters: String id : The ID of the pre-created Text element int font_weight : The font-weight for the Text. Supported values are: 100,200,300,400,500,600,700,800,900 Returns: Nothing Note This feature depends on the font family & is only applicable if the font supports it.","title":"setFontWeight"},{"location":"textObject/#settextnormal","text":"Use: To set the font-style of a pre-created Text element to Normal (Removes Bold & Italics Styles) Definition: setTextNormal( String id ) Parameters: String id : The ID of the pre-created Text element Returns: Nothing","title":"setTextNormal"},{"location":"textObject/#settextbold","text":"Use: To set the font-style of a pre-created Text element to Bold Definition: setTextBold( String id ) Parameters: String id : The ID of the pre-created Text element Returns: Nothing","title":"setTextBold"},{"location":"textObject/#settextitalic","text":"Use: To set the font-style of a pre-created Text element to Italic Definition: setTextItalic( String id ) Parameters: String id : The ID of the pre-created Text element Returns: Nothing","title":"setTextItalic"},{"location":"textObject/#settextalignment","text":"Use: To set the alignment of a pre-created Text element Definition: setTextAlignment( String id, int alignment ) Parameters: String id : The ID of the pre-created Text element int alignment : The alignment of the Text. Supported values are: CENTER_ALIGN, LEFT_ALIGN, RIGHT_ALIGN, JUSTIFY_TEXT Returns: Nothing","title":"setTextAlignment"},{"location":"videosObject/","text":"Video createVideoFromLink Use: To create a Video element from an external weblink Definition: createVideoFromLink( String link, long x, long y, long w, long h, bool enable_controls, bool mute_audio, bool enable_autoplay, bool loop_video, String id ) Parameters: String link : The external link of the Video to load from long x : The position of the Video from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Video from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Video in px long h : The height of the Video in px bool enable_controls : Set this flag to true in order to show the video controls to the user bool mute_audio : Set this flag to true in order to mute the video bool enable_autoplay : Set this flag to true in order to autoplay the video onve loaded bool loop_video : Set this flag to true in order to loop the video continuously String id : The ID of the Video element Returns: ID of the Video element as a String createVideoFromFile Use: To create a Video element using an internal/local video file Definition: createVideoFromFile( String file_name, long x, long y, long w, long h, bool enable_controls, bool mute_audio, bool enable_autoplay, bool loop_video, String id ) Parameters: String file_name : The external link of the Video to load from long x : The position of the Video from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Video from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Video in px long h : The height of the Video in px bool enable_controls : Set this flag to true in order to show the video controls to the user bool mute_audio : Set this flag to true in order to mute the audio of the video bool enable_autoplay : Set this flag to true in order to autoplay the video onve loaded bool loop_video : Set this flag to true in order to loop the video continuously String id : The ID of the Video element Returns: ID of the Video element as a String Note Before using this feature, make sure the videos are copied in the videos folder of EmbedUI Info You can click the Assets icon in the menu bar of the application to open the Assets folder. You can find the EmbedUI folder in My Documents > EmbedUi","title":"Video"},{"location":"videosObject/#video","text":"","title":"Video"},{"location":"videosObject/#createvideofromlink","text":"Use: To create a Video element from an external weblink Definition: createVideoFromLink( String link, long x, long y, long w, long h, bool enable_controls, bool mute_audio, bool enable_autoplay, bool loop_video, String id ) Parameters: String link : The external link of the Video to load from long x : The position of the Video from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Video from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Video in px long h : The height of the Video in px bool enable_controls : Set this flag to true in order to show the video controls to the user bool mute_audio : Set this flag to true in order to mute the video bool enable_autoplay : Set this flag to true in order to autoplay the video onve loaded bool loop_video : Set this flag to true in order to loop the video continuously String id : The ID of the Video element Returns: ID of the Video element as a String","title":"createVideoFromLink"},{"location":"videosObject/#createvideofromfile","text":"Use: To create a Video element using an internal/local video file Definition: createVideoFromFile( String file_name, long x, long y, long w, long h, bool enable_controls, bool mute_audio, bool enable_autoplay, bool loop_video, String id ) Parameters: String file_name : The external link of the Video to load from long x : The position of the Video from its top-left corner along x-axis (horizontal) of the screen in px long y : The position of the Video from its top-left corner along y-axis (vertical) of the screen in px long w : The width of the Video in px long h : The height of the Video in px bool enable_controls : Set this flag to true in order to show the video controls to the user bool mute_audio : Set this flag to true in order to mute the audio of the video bool enable_autoplay : Set this flag to true in order to autoplay the video onve loaded bool loop_video : Set this flag to true in order to loop the video continuously String id : The ID of the Video element Returns: ID of the Video element as a String Note Before using this feature, make sure the videos are copied in the videos folder of EmbedUI Info You can click the Assets icon in the menu bar of the application to open the Assets folder. You can find the EmbedUI folder in My Documents > EmbedUi","title":"createVideoFromFile"}]}